import { AutocompleteInteraction, ButtonInteraction, ChannelSelectMenuInteraction, ChatInputCommandInteraction, ClientEvents, ContextMenuCommandBuilder, MentionableSelectMenuInteraction, MessageContextMenuCommandInteraction, ModalSubmitInteraction, RoleSelectMenuInteraction, SlashCommandBuilder, SlashCommandOptionsOnlyBuilder, SlashCommandSubcommandsOnlyBuilder, StringSelectMenuInteraction, UserContextMenuCommandInteraction, UserSelectMenuInteraction } from "discord.js";
import { ExtendedClient } from ".";
export interface IEvent<ClientType extends ExtendedClient = ExtendedClient> {
    name: keyof ClientEvents;
    once?: boolean;
    execute: (client: ClientType, ...args: any[]) => Promise<void>;
}
export interface ISlashCommand<ClientType extends ExtendedClient = ExtendedClient> {
    data: SlashCommandBuilder | SlashCommandSubcommandsOnlyBuilder | SlashCommandOptionsOnlyBuilder;
    cooldown?: number;
    autocomplete?: (interaction: AutocompleteInteraction, client: ClientType) => Promise<void>;
    execute: (interaction: ChatInputCommandInteraction, client: ClientType) => Promise<void>;
}
export interface IUserContextMenu<ClientType extends ExtendedClient = ExtendedClient> {
    data: ContextMenuCommandBuilder;
    execute: (interaction: UserContextMenuCommandInteraction, client: ClientType) => Promise<void>;
}
export interface IMessageContextMenu<ClientType extends ExtendedClient = ExtendedClient> {
    data: ContextMenuCommandBuilder;
    execute: (interaction: MessageContextMenuCommandInteraction, client: ClientType) => Promise<void>;
}
export interface IButton<ClientType extends ExtendedClient = ExtendedClient> {
    id: string;
    execute: (interaction: ButtonInteraction, client: ClientType) => Promise<void>;
}
export interface IStringSelectMenu<ClientType extends ExtendedClient = ExtendedClient> {
    id: string;
    execute: (interaction: StringSelectMenuInteraction, client: ClientType) => Promise<void>;
}
export interface IRoleSelectMenu<ClientType extends ExtendedClient = ExtendedClient> {
    id: string;
    execute: (interaction: RoleSelectMenuInteraction, client: ClientType) => Promise<void>;
}
export interface IChannelSelectMenu<ClientType extends ExtendedClient = ExtendedClient> {
    id: string;
    execute: (interaction: ChannelSelectMenuInteraction, client: ClientType) => Promise<void>;
}
export interface IUserSelectMenu<ClientType extends ExtendedClient = ExtendedClient> {
    id: string;
    execute: (interaction: UserSelectMenuInteraction, client: ClientType) => Promise<void>;
}
export interface IMentionableSelectMenu<ClientType extends ExtendedClient = ExtendedClient> {
    id: string;
    execute: (interaction: MentionableSelectMenuInteraction, client: ClientType) => Promise<void>;
}
export interface IModal<ClientType extends ExtendedClient = ExtendedClient> {
    id: string;
    execute: (interaction: ModalSubmitInteraction, client: ClientType) => Promise<void>;
}
