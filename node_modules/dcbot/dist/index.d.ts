import { Client, ClientOptions, Collection, Guild, GuildMember, MessageCreateOptions, MessagePayload, PollAnswerData, PollData, PollLayoutType, PollQuestionMedia, RoleResolvable } from 'discord.js';
import { ISlashCommand, IStringSelectMenu, IButton, IModal, IUserContextMenu, IMessageContextMenu, IRoleSelectMenu, IChannelSelectMenu, IUserSelectMenu, IMentionableSelectMenu, IEvent } from './types';
export declare class Poll implements PollData {
    question: PollQuestionMedia;
    answers: readonly PollAnswerData[];
    duration: number;
    allowMultiselect: boolean;
    layoutType?: PollLayoutType | undefined;
    constructor(data: PollData);
}
export declare class Event<ClientType extends ExtendedClient = ExtendedClient> {
    name: IEvent["name"];
    once: IEvent["once"];
    execute: IEvent<ClientType>["execute"];
    constructor(data: IEvent<ClientType>);
}
export declare class SlashCommand<ClientType extends ExtendedClient = ExtendedClient> {
    data: ISlashCommand["data"];
    cooldown: ISlashCommand["cooldown"];
    execute: ISlashCommand<ClientType>["execute"];
    constructor(data: ISlashCommand<ClientType>);
}
export declare class UserContextMenu<ClientType extends ExtendedClient = ExtendedClient> {
    data: IUserContextMenu["data"];
    execute: IUserContextMenu<ClientType>["execute"];
    constructor(data: IUserContextMenu<ClientType>);
}
export declare class MessageContextMenu<ClientType extends ExtendedClient = ExtendedClient> {
    data: IMessageContextMenu["data"];
    execute: IMessageContextMenu<ClientType>["execute"];
    constructor(data: IMessageContextMenu<ClientType>);
}
export declare class Button<ClientType extends ExtendedClient = ExtendedClient> {
    id: IButton["id"];
    execute: IButton<ClientType>["execute"];
    constructor(data: IButton<ClientType>);
}
export declare class StringSelectMenu<ClientType extends ExtendedClient = ExtendedClient> {
    id: IStringSelectMenu["id"];
    execute: IStringSelectMenu<ClientType>["execute"];
    constructor(data: IStringSelectMenu<ClientType>);
}
export declare class RoleSelectMenu<ClientType extends ExtendedClient = ExtendedClient> {
    id: IRoleSelectMenu["id"];
    execute: IRoleSelectMenu<ClientType>["execute"];
    constructor(data: IRoleSelectMenu<ClientType>);
}
export declare class ChannelSelectMenu<ClientType extends ExtendedClient = ExtendedClient> {
    id: IChannelSelectMenu["id"];
    execute: IChannelSelectMenu<ClientType>["execute"];
    constructor(data: IChannelSelectMenu<ClientType>);
}
export declare class UserSelectMenu<ClientType extends ExtendedClient = ExtendedClient> {
    id: IUserSelectMenu["id"];
    execute: IUserSelectMenu<ClientType>["execute"];
    constructor(data: IUserSelectMenu<ClientType>);
}
export declare class MentionableSelectMenu<ClientType extends ExtendedClient = ExtendedClient> {
    id: IMentionableSelectMenu["id"];
    execute: IMentionableSelectMenu<ClientType>["execute"];
    constructor(data: IMentionableSelectMenu<ClientType>);
}
export declare class Modal<ClientType extends ExtendedClient = ExtendedClient> {
    id: IModal["id"];
    execute: IModal<ClientType>["execute"];
    constructor(data: IModal<ClientType>);
}
export declare class ExtendedClient extends Client {
    apps: SlashCommand[] & MessageContextMenu[] & UserContextMenu[];
    commands: Collection<string, SlashCommand>;
    userContextMenus: Collection<string, UserContextMenu>;
    messageContextMenus: Collection<string, MessageContextMenu>;
    modals: Collection<string, Modal>;
    stringSelectMenus: Collection<string, StringSelectMenu>;
    roleSelectMenus: Collection<string, RoleSelectMenu>;
    channelSelectMenus: Collection<string, ChannelSelectMenu>;
    userSelectMenus: Collection<string, UserSelectMenu>;
    mentionableSelectMenus: Collection<string, MentionableSelectMenu>;
    buttons: Collection<string, Button>;
    private cooldowns;
    constructor(options: ClientOptions);
    /**
     * Sendet jegliche DM Nachrichten, die an den Bot geschickt werden in einen spezifischen Channel
     * @param channelId Die ID des Textkanals , in den DM Nachrichten an den Bot gesendet werden sollen
     */
    enableDmLog(channelId: string): void;
    /**
     * Aktiviert die automatische Rollenverteilung für neue Mitglieder
     * @param roles Die ID oder IDs der Rolle/n
     */
    enableAutoRole(...roles: RoleResolvable[]): void;
    /**
     * Gibt eine Nachricht im Format `[{ZEIT} WARN] {message}` aus
     * @param message Die Warnung
     */
    warn(message: string): void;
    /**
     * Gibt eine Nachricht im Format `[{ZEIT} INFO] {message}` aus
     * @param message Die Info Nachricht
     */
    info(message: string): void;
    /**
     * Gibt eine Rote nachricht im Format `[{ZEIT} ERROR] {message}` aus
     * @param message Die Error Nachricht
     * */
    error(message: string): void;
    /**Gibt eine Meldung in der Konsole, wenn der Bot bereit ist */
    logWhenReady(): void;
    /**
     * Kümmert sich um alle Interactions
     * @param client Nur erforderlich, wenn eine eigene Client-Klasse verwendet wird
     * */
    handleInteractions(client?: ExtendedClient): void;
    deployCommands(guildIdOrIds: string | string[]): void;
    loadCommands(path: string): Promise<void>;
    loadEvents(path: string): Promise<void>;
    loadRoleSelectMenus(path: string): Promise<void>;
    loadStringSelectMenus(path: string): Promise<void>;
    loadChannelSelectMenus(path: string): Promise<void>;
    loadUserSelectMenus(path: string): Promise<void>;
    loadMentionableSelectMenus(path: string): Promise<void>;
    loadButtons(path: string): Promise<void>;
    loadModals(path: string): Promise<void>;
    loadUserContextMenus(path: string): Promise<void>;
    loadMessageContextMenus(path: string): Promise<void>;
}
export declare class MemberManager {
    member: GuildMember;
    guild: Guild;
    constructor(member: GuildMember, guild: Guild);
    sendDM(options: string | MessagePayload | MessageCreateOptions): Promise<boolean>;
}
