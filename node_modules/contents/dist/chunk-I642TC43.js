import {
  cooldowns_default,
  init_cooldowns
} from "./chunk-NJJFVLCF.js";
import {
  casino_default,
  init_casino
} from "./chunk-W44NITJV.js";
import {
  __esm,
  __export,
  init_esm_shims
} from "./chunk-WWCIODDN.js";

// Commands/Casino/crime.ts
var crime_exports = {};
__export(crime_exports, {
  default: () => crime_default
});
import { EmbedBuilder, SlashCommandBuilder } from "discord.js";
var command, crime_default;
var init_crime = __esm({
  "Commands/Casino/crime.ts"() {
    init_esm_shims();
    init_casino();
    init_cooldowns();
    command = {
      data: new SlashCommandBuilder().setName("crime").setDescription("Begehe ein Verbrechen f\xFCr etwas Geld"),
      async execute(interaction) {
        let CD = await cooldowns_default.findOne({ user: interaction.user.id });
        if (CD && CD.crime) {
          const now = Date.now();
          const lastExecute = parseInt(CD.crime);
          const cooldownTime = 108e5;
          const timestamp = Math.floor((lastExecute + cooldownTime) / 1e3);
          if (now - lastExecute < cooldownTime) {
            const embed = new EmbedBuilder({
              title: "Plan gescheitert",
              description: `Du musst dich erstmal versteckt halten, bevor du dein n\xE4chstes Verbrechen planst.
<t:${timestamp}:R> kannst du wieder aus deiner Deckung kommen.`,
              color: 16716820
            });
            interaction.reply({ embeds: [embed] });
            return;
          }
        }
        if (!CD) {
          CD = await cooldowns_default.create({
            user: interaction.user.id,
            crime: String,
            work: String,
            rob: String,
            daily: String
          });
        }
        CD.crime = Date.now().toString();
        await CD.save();
        let User = await casino_default.findOne({ user: interaction.user.id });
        if (!User) {
          User = await casino_default.create({
            user: interaction.user.id,
            wallet: 0,
            bank: 0,
            inventory: {}
          });
        }
        const chance = Math.floor(Math.random() * 100);
        if (chance < 75) {
          const income = Math.floor(Math.random() * 750);
          const incomeMessages = [
            `Du hast bei dem Technikladen ein paar Strassen weiter ein Handy mitgehen lassen und konntest es f\xFCr \u{1F4B0}${income} weiterverkaufen.`
          ];
          const embed = new EmbedBuilder({
            title: "Erfolgreiches Verbrechen",
            description: incomeMessages[Math.floor(Math.random() * incomeMessages.length)],
            color: 7864064
          });
          interaction.reply({ embeds: [embed] });
          User.wallet += income;
          await User.save();
          return;
        } else {
          const fined = Math.floor(Math.random() * 500);
          const fineMessages = [
            `Du wurdest bei dem Versuch erwischt, ein Handy zu klauen und musstest \u{1F4B0}${fined} Strafe bezahlen.`
          ];
          const embed = new EmbedBuilder({
            title: "Verbrechen fehlgeschlagen",
            description: fineMessages[Math.floor(Math.random() * fineMessages.length)],
            color: 16716820
          });
          interaction.reply({ embeds: [embed] });
          User.wallet -= fined;
          await User.save();
          return;
        }
      }
    };
    crime_default = command;
  }
});

export {
  crime_default,
  crime_exports,
  init_crime
};
