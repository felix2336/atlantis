import { SlashCommandBuilder, SlashCommandSubcommandsOnlyBuilder, SlashCommandOptionsOnlyBuilder, ChatInputCommandInteraction, InteractionResponse, Message, UserContextMenuCommandInteraction, MessageContextMenuCommandInteraction, ContextMenuCommandBuilder, ButtonInteraction, StringSelectMenuInteraction, ModalSubmitInteraction, Client, Collection, Guild, ClientOptions, TextChannel } from 'discord.js';
import { MyClient } from 'contents';
import { AudioPlayer } from '@discordjs/voice';

interface SlashCommand {
    data: SlashCommandBuilder | SlashCommandSubcommandsOnlyBuilder | SlashCommandOptionsOnlyBuilder;
    execute: (interaction: ChatInputCommandInteraction, client: MyClient) => Promise<void> | Promise<InteractionResponse<boolean> | undefined> | Promise<Message<boolean>> | Promise<Message<boolean> | undefined>;
}
interface ContextMenu<T extends UserContextMenuCommandInteraction | MessageContextMenuCommandInteraction> {
    data: ContextMenuCommandBuilder;
    execute: (interaction: T, client: MyClient) => Promise<void> | Promise<InteractionResponse<boolean> | undefined>;
}
interface Button {
    id: string;
    execute: (interaction: ButtonInteraction, client: MyClient) => Promise<void> | Promise<InteractionResponse<boolean> | undefined>;
}
interface SelectMenu {
    id: string;
    execute: (interaction: StringSelectMenuInteraction, client: MyClient) => Promise<void>;
}
interface Modal {
    id: string;
    execute: (interaction: ModalSubmitInteraction, client: MyClient) => Promise<void>;
}

declare enum SuggestionType {
    Server = 1,
    Bot = 2
}
interface SuggestionData {
    user: string;
    suggestion: string;
    type: SuggestionType;
}

declare module "contents" {
    export class Cooldown<K, V> {
        private storage: Record<string, V>;
        public set(key: K, value: V): void;
        public has(key: K): boolean;
        public isExpired(key: K): boolean;
        public delete(key: K): boolean;
    }
    export class MyClient extends Client<boolean> {
        public commands: Collection<string, SlashCommand>;
        public apps: SlashCommand[] & ContextMenu<MessageContextMenuCommandInteraction | UserContextMenuCommandInteraction>[];
        public contextMenus: Collection<string, ContextMenu<MessageContextMenuCommandInteraction | UserContextMenuCommandInteraction>>;
        public modals: Collection<string, Modal>;
        public selectMenus: Collection<string, SelectMenu>;
        public buttons: Collection<string, Button>;
        public guild: Guild | undefined;
        public queue: { title: string, url: string, thumbnail: string, duration: string }[];
        public player: AudioPlayer | undefined;

        constructor(options: ClientOptions);

        public setGuild(guild: Guild): void;
        public enableAudioPlayer(): void;
    }
    export class Suggestion {
        user: string;
        suggestion: string;
        type: SuggestionType;

        constructor(data: SuggestionData);

        public submit(channel: TextChannel): Promise<void>
        private getTypeString(): string
    }
}

export { type SuggestionData, SuggestionType };
