import { SlashCommandBuilder, SlashCommandSubcommandsOnlyBuilder, SlashCommandOptionsOnlyBuilder, ChatInputCommandInteraction, InteractionResponse, Message, UserContextMenuCommandInteraction, MessageContextMenuCommandInteraction, ContextMenuCommandBuilder, ButtonInteraction, StringSelectMenuInteraction, ModalSubmitInteraction, Client, Collection, Guild, ClientOptions, TextChannel } from 'discord.js';
import { AudioPlayer } from '@discordjs/voice';

declare module "contents" {
    export class MyClient extends Client {
        commands: Collection<string, SlashCommand>;
        apps: SlashCommand[] & ContextMenu<MessageContextMenuCommandInteraction | UserContextMenuCommandInteraction>[];
        contextMenus: Collection<string, ContextMenu<MessageContextMenuCommandInteraction | UserContextMenuCommandInteraction>>;
        modals: Collection<string, Modal>;
        selectMenus: Collection<string, SelectMenu>;
        buttons: Collection<string, Button>;
        guild: Guild | undefined;
        queue: {
            title: string;
            url: string;
            thumbnail: string;
            duration: string;
        }[];
        player: AudioPlayer | undefined;
        constructor(options: ClientOptions);
        setGuild(guild: Guild): void;
        enableAudioPlayer(): void;
    }

    interface SlashCommand {
        data: SlashCommandBuilder | SlashCommandSubcommandsOnlyBuilder | SlashCommandOptionsOnlyBuilder;
        execute: (interaction: ChatInputCommandInteraction, client: MyClient) => Promise<void> | Promise<InteractionResponse<boolean> | undefined> | Promise<Message<boolean>> | Promise<Message<boolean> | undefined>;
    }
    interface ContextMenu<T extends UserContextMenuCommandInteraction | MessageContextMenuCommandInteraction> {
        data: ContextMenuCommandBuilder;
        execute: (interaction: T, client: MyClient) => Promise<void> | Promise<InteractionResponse<boolean> | undefined>;
    }
    interface Button {
        id: string;
        execute: (interaction: ButtonInteraction, client: MyClient) => Promise<void> | Promise<InteractionResponse<boolean> | undefined>;
    }
    interface SelectMenu {
        id: string;
        execute: (interaction: StringSelectMenuInteraction, client: MyClient) => Promise<void>;
    }
    interface Modal {
        id: string;
        execute: (interaction: ModalSubmitInteraction, client: MyClient) => Promise<void>;
    }



    export class Cooldown<K, V> {
        private storage: Record<string, V>;
        public set(key: K, value: V): void;
        public has(key: K): boolean;
        public isExpired(key: K): boolean;
        public delete(key: K): boolean;
    }
    export class Suggestion {
        user: string;
        suggestion: string;
        type: SuggestionType;

        constructor(data: SuggestionData);

        public submit(channel: TextChannel): Promise<void>
        private getTypeString(): string
    }
    export enum SuggestionType {
        Server = 1,
        Bot = 2
    }
    export interface SuggestionData {
        user: string,
        suggestion: string,
        type: SuggestionType
    }
}
