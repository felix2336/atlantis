import {
  MessageUser
} from "./chunk-P5JGOPVX.js";
import {
  init_esm_shims
} from "./chunk-WWCIODDN.js";

// Commands/Staff/messages.ts
init_esm_shims();
import { EmbedBuilder, Colors, SlashCommandBuilder, PermissionFlagsBits } from "discord.js";
import { readFileSync } from "fs";
var command = {
  data: new SlashCommandBuilder().setName("messages").setDescription("Lasse dir Nachrichten anzeigen von dir, einem anderen User oder das Leaderboard").setDefaultMemberPermissions(PermissionFlagsBits.SendMessages).addSubcommand(
    (input) => input.setName("leaderboard").setDescription("Lasse dir das Leaderboard dieser Woche anzeigen").addStringOption((input2) => input2.setName("type").setDescription("Welches Leaderboard m\xF6chtest du sehen?").addChoices({ name: "Heutiges Leaderboard", value: "daily" }, { name: "Leaderboard dieser Woche", value: "weekly" }).setRequired(true))
  ),
  async execute(interaction, client) {
    const DB = JSON.parse(readFileSync("./JSON/messages.json", "utf8"));
    const member = interaction.member;
    if (!member.roles.cache.has("1156298949301379212")) return interaction.reply({ content: "Du musst im Team sein, um diesen Befehl nutzen zu k\xF6nnen", ephemeral: true });
    const subcommand = interaction.options.getSubcommand();
    const day = (/* @__PURE__ */ new Date()).getDay();
    switch (subcommand) {
      case "leaderboard": {
        const type = interaction.options.getString("type");
        switch (type) {
          case "daily": {
            const leaderboard = [];
            for (const UserData of DB) {
              const User = new MessageUser().assignData(UserData);
              const messages = User.getMessagesOfDay(day);
              leaderboard.push({ user: User.userid, count: messages });
            }
            const sortedLeaderboard = leaderboard.sort((a, b) => b.count - a.count);
            let message = "";
            sortedLeaderboard.forEach((user, index) => {
              message += `\`\`${index + 1}. \`\` <@${user.user}> **\u2022 ${user.count}** Nachrichten gesendet.
`;
            });
            const embed = new EmbedBuilder({
              title: "Daily Messages Leaderboard",
              description: message,
              color: Colors.Aqua
            });
            interaction.reply({ embeds: [embed] });
            break;
          }
          case "weekly": {
            const leaderboard = [];
            for (const UserData of DB) {
              const User = new MessageUser().assignData(UserData);
              leaderboard.push({ user: User.userid, count: User.getTotalMessages() });
            }
            const sorted = leaderboard.sort((a, b) => b.count - a.count);
            let message = "";
            for (let i = 0; i < leaderboard.length; i++) {
              const entry = leaderboard[i];
              const member2 = await interaction.guild.members.fetch(entry.user);
              if (!member2) return interaction.reply({ content: "Etwas ist schiefgelaufen", ephemeral: true });
              if (member2.roles.cache.has("1201848061819891774")) {
                message += `\`\`${i + 1}. \`\`\u23F1\uFE0F <@${entry.user}> **\u2022 ${entry.count}** Nachrichten gesendet.
`;
              } else {
                if (entry.count < 50) {
                  message += `\`\`${i + 1}. \`\`<a:redlight:1211374559224135700> <@${entry.user}> **\u2022 ${entry.count}** Nachrichten gesendet.
`;
                } else if (entry.count >= 50 && entry.count < 75) {
                  message += `\`\`${i + 1}. \`\`<:dogsmile:1230441707766808608> <@${entry.user}> **\u2022 ${entry.count}** Nachrichten gesendet.
`;
                } else {
                  message += `\`\`${i + 1}. \`\`<a:6797evolvingbadgeboost:1234205150898425898> <@${entry.user}> **\u2022 ${entry.count}** Nachrichten gesendet.
`;
                }
              }
            }
            const embed = new EmbedBuilder({
              title: "Weekly Messages Leaderboard",
              description: message,
              color: Colors.Aqua
            });
            interaction.reply({ embeds: [embed] });
          }
        }
        break;
      }
    }
  }
};
var messages_default = command;
export {
  messages_default as default
};
