import {
  init_esm_shims
} from "./chunk-WWCIODDN.js";

// contents.ts
init_esm_shims();
import { Colors, EmbedBuilder, ChannelType, ActionRowBuilder, ButtonBuilder } from "discord.js";
import { writeFileSync, appendFileSync } from "fs";
var Suggestion = class {
  user;
  suggestion;
  type;
  constructor(data) {
    this.user = data.user;
    this.suggestion = data.suggestion;
    this.type = data.type;
  }
  async submit(channel) {
    const embed = new EmbedBuilder({
      title: "Neuer Vorschlag",
      description: `<@${this.user}> hat einen neuen ${this.getTypeString()} eingereicht:

**${this.suggestion}**`,
      color: Colors.DarkAqua
    });
    await channel.send({ embeds: [embed] });
  }
  getTypeString() {
    if (this.type == 1) return "Server Vorschlag";
    else if (this.type == 2) return "Bot Vorschlag";
  }
};
var ticketButtons = new ActionRowBuilder().addComponents([
  new ButtonBuilder({
    customId: "close-with-reason",
    label: "\u{1F512} Schlie\xDFen mit Begr\xFCndung",
    style: 4
  }),
  new ButtonBuilder({
    customId: "claim",
    label: "\u{1F64B}\u200D\u2642\uFE0F Beanspruchen",
    style: 3
  })
]);
var unbanRequestButton = new ActionRowBuilder().addComponents([
  new ButtonBuilder({
    label: "Entbannungsantrag",
    customId: "unban-request",
    style: 1
  })
]);
var MessageUser = class {
  userid;
  username;
  totalMessages;
  messages;
  constructor(data) {
    this.userid = data?.userid;
    this.username = data?.username;
    this.totalMessages = 0;
    this.messages = {
      monday: 0,
      tuesday: 0,
      wednesday: 0,
      thursday: 0,
      friday: 0,
      saturday: 0,
      sunday: 0
    };
  }
  addMessage(dayNumber) {
    const day = this.getDayByIndex(dayNumber);
    this.totalMessages++;
    switch (day) {
      case "monday": {
        this.messages.monday++;
        break;
      }
      case "tuesday": {
        this.messages.tuesday++;
        break;
      }
      case "wednesday": {
        this.messages.wednesday++;
        break;
      }
      case "thursday": {
        this.messages.thursday++;
        break;
      }
      case "friday": {
        this.messages.friday++;
        break;
      }
      case "saturday": {
        this.messages.saturday++;
        break;
      }
      case "sunday": {
        this.messages.sunday++;
        break;
      }
    }
  }
  getMessagesOfDay(dayNumber) {
    const day = this.getDayByIndex(dayNumber);
    switch (day) {
      case "monday": {
        return this.messages.monday;
      }
      case "tuesday": {
        return this.messages.tuesday;
      }
      case "wednesday": {
        return this.messages.wednesday;
      }
      case "thursday": {
        return this.messages.thursday;
      }
      case "friday": {
        return this.messages.friday;
      }
      case "saturday": {
        return this.messages.saturday;
      }
      case "sunday": {
        return this.messages.sunday;
      }
      default: {
        return 0;
      }
    }
  }
  getTotalMessages() {
    return this.totalMessages;
  }
  resetMessages() {
    this.totalMessages = 0;
    this.totalMessages = 0;
    this.messages = {
      monday: 0,
      tuesday: 0,
      wednesday: 0,
      thursday: 0,
      friday: 0,
      saturday: 0,
      sunday: 0
    };
  }
  assignData(data) {
    this.userid = data.userid;
    this.username = data.username;
    this.totalMessages = data.totalMessages;
    this.messages.monday = data.messages.monday;
    this.messages.tuesday = data.messages.tuesday;
    this.messages.wednesday = data.messages.wednesday;
    this.messages.thursday = data.messages.thursday;
    this.messages.friday = data.messages.friday;
    this.messages.saturday = data.messages.saturday;
    this.messages.sunday = data.messages.sunday;
    return this;
  }
  getDayByIndex(index) {
    const days = ["sunday", "monday", "tuesday", "wednesday", "thursday", "friday", "saturday"];
    return days[index];
  }
};
var Backup = class {
  categories;
  constructor(data) {
    this.categories = data?.categories;
  }
  save(guild) {
    const categories = {};
    guild.channels.cache.filter((channel) => channel.type === ChannelType.GuildCategory).forEach((category) => {
      categories[category.name] = {};
      guild.channels.cache.filter((channel) => channel.parentId === category.id).forEach((channel) => {
        categories[category.name][channel.name] = channel.type;
      });
    });
    this.categories = categories;
    writeFileSync("./JSON/backup.json", JSON.stringify(this, null, 2), "utf8");
  }
  async load(guild) {
    for (const category in this.categories) {
      const cat = await guild.channels.create({
        name: category,
        type: ChannelType.GuildCategory,
        permissionOverwrites: [
          {
            id: guild.roles.everyone,
            deny: ["ViewChannel"]
          }
        ]
      });
      const channelData = this.categories[category];
      for (const channel in channelData) {
        const channelType = channelData[channel];
        await guild.channels.create({
          name: channel,
          type: channelType,
          parent: cat
        });
      }
    }
  }
};
var MemberManager = class {
  member;
  guild;
  constructor(member, guild) {
    this.member = member;
    this.guild = guild;
  }
  getMember() {
    return this.member;
  }
  async addRole(roleOrRoles) {
    await this.member.roles.add(roleOrRoles).catch(console.log);
  }
  async removeRole(roleOrRoles) {
    await this.member.roles.remove(roleOrRoles).catch(console.log);
  }
  hasRole(role) {
    return this.member.roles.cache.has(role);
  }
  async ban(moderator, reason, deleteMessageSeconds) {
    await this.member.ban({ reason, deleteMessageSeconds }).catch((e) => {
      console.log(e);
      return false;
    });
    const embed = new EmbedBuilder({
      author: { name: this.guild.name, iconURL: this.guild.iconURL() || "" },
      title: "Du wurdest gebannt",
      description: `Grund: **${reason}**.

Du kannst mit dem Button unten einen Entbannungsantrag stellen!`,
      color: Colors.Red
    });
    const logEmbed = new EmbedBuilder({
      title: "Neuer Ban",
      fields: [
        { name: "User", value: `${this.member} (${this.member.user.username}) - ${this.member.user.id}` },
        { name: "Grund", value: reason }
      ],
      footer: { text: `Durchgef\xFChrt von ${moderator.user.username}`, iconURL: moderator.user.displayAvatarURL() }
    });
    const channel = this.guild.channels.cache.get("1221387141834084363" /* user_update_log */);
    await this.member.send({ embeds: [embed], components: [unbanRequestButton] }).catch(console.log);
    await channel.send({ embeds: [logEmbed] }).catch(console.log);
    return true;
  }
  async kick(moderator, reason) {
    await this.member.kick(reason).catch((e) => {
      console.log(e);
      return false;
    });
    const embed = new EmbedBuilder({
      author: { name: this.guild.name, iconURL: this.guild.iconURL() || "" },
      title: "Du wurdest gekickt",
      description: `Grund: **${reason}**.`,
      color: Colors.Red
    });
    const logEmbed = new EmbedBuilder({
      title: "Neuer Kick",
      fields: [
        { name: "User", value: `${this.member} (${this.member.user.username}) - ${this.member.user.id}` },
        { name: "Grund", value: reason }
      ],
      footer: { text: `Durchgef\xFChrt von ${moderator.user.username}`, iconURL: moderator.user.displayAvatarURL() }
    });
    const channel = this.guild.channels.cache.get("1221387141834084363" /* user_update_log */);
    await this.member.send({ embeds: [embed], components: [unbanRequestButton] }).catch(console.log);
    await channel.send({ embeds: [logEmbed] }).catch(console.log);
    return true;
  }
  getId() {
    return this.member.user.id;
  }
  getAvatarUrl() {
    return this.member.displayAvatarURL();
  }
  getPermissions() {
    const perms = [];
    for (const perm of this.member.permissions) {
      perms.push(perm);
    }
    perms.sort();
    return perms;
  }
  getRoles() {
    const roles = [];
    for (const [id, role] of this.member.roles.cache) {
      if (role.name == "@everyone") continue;
      roles.push(role);
    }
    roles.sort((a, b) => b.position - a.position);
    return roles;
  }
  isStaff() {
    return this.member.roles.cache.some((r) => r.id == "1156298949301379212" /* staff */);
  }
};
function countdown(ms) {
  return `<t:${Math.floor(ms / 1e3)}:R>`;
}

export {
  Suggestion,
  ticketButtons,
  unbanRequestButton,
  MessageUser,
  Backup,
  MemberManager,
  countdown
};
