import {
  init_esm_shims
} from "./chunk-WWCIODDN.js";

// Commands/Admin/staff-changes.ts
init_esm_shims();
import { EmbedBuilder, SlashCommandBuilder, PermissionFlagsBits } from "discord.js";
var command = {
  data: new SlashCommandBuilder().setName("staff").setDescription("Gib eine Team\xE4nderung preis").setDefaultMemberPermissions(PermissionFlagsBits.Administrator).addSubcommand(
    (input) => input.setName("add").setDescription("Gib eine Meldung, dass ein Teammitglied aufgenommen wurde").addUserOption((input2) => input2.setName("user").setDescription("Welcher user wurde ins Team aufgenommen?").setRequired(true)).addRoleOption((input2) => input2.setName("role").setDescription("Als was wird uns dieser User unterst\xFCtzen?").setRequired(true)).addStringOption((input2) => input2.setName("reason").setDescription("Warum wurde dieser User ins Team aufgenommen?"))
  ).addSubcommand(
    (input) => input.setName("uprank").setDescription("Gib eine Meldung, dass ein Teammitglied bef\xF6rdert wurde").addUserOption((input2) => input2.setName("user").setDescription("Welcher user wurde bef\xF6rdert?").setRequired(true)).addRoleOption((input2) => input2.setName("previous").setDescription("Welchen Rang hatte der User vor der Bef\xF6rderung?").setRequired(true)).addRoleOption((input2) => input2.setName("next").setDescription("Welchen Rang hat der User jetzt?").setRequired(true)).addStringOption((input2) => input2.setName("reason").setDescription("Warum wurde dieser User bef\xF6rdert?"))
  ).addSubcommand(
    (input) => input.setName("downrank").setDescription("Gib eine Meldung, dass ein Teammitglied degradiert wurde").addUserOption((input2) => input2.setName("user").setDescription("Welcher user wurde degradiert?").setRequired(true)).addRoleOption((input2) => input2.setName("previous").setDescription("Welchen Rang hatte der User vor der Degradierung?").setRequired(true)).addRoleOption((input2) => input2.setName("next").setDescription("Welchen Rang hat der User jetzt?").setRequired(true)).addStringOption((input2) => input2.setName("reason").setDescription("Warum wurde dieser User degradiert?"))
  ).addSubcommand(
    (input) => input.setName("kick").setDescription("Gib eine Meldung, dass ein Teammitglied gekickt wurde").addUserOption((input2) => input2.setName("user").setDescription("Welcher user wurde aus dem Team geworfen?").setRequired(true)).addRoleOption((input2) => input2.setName("role").setDescription("Als hat uns dieser User unterst\xFCtzt?").setRequired(true)).addStringOption((input2) => input2.setName("reason").setDescription("Warum wurde dieser User ins Team aufgenommen?"))
  ).addSubcommand(
    (input) => input.setName("leave").setDescription("Gib eine Meldung, dass ein Teammitglied das Team verlassen hat").addUserOption((input2) => input2.setName("user").setDescription("Welcher user hat das Team verlassen?").setRequired(true)).addRoleOption((input2) => input2.setName("role").setDescription("Als was wird hat uns dieser User unterst\xFCtzt?").setRequired(true)).addStringOption((input2) => input2.setName("reason").setDescription("Warum hat dieser User das Team verlassen?"))
  ),
  async execute(interaction, client) {
    const channel = client.guild.channels.cache.get("1182852409198903316");
    const ping = "<@&1148638515840700497>";
    const subcommand = interaction.options.getSubcommand();
    switch (subcommand) {
      case "add": {
        const user = interaction.options.getUser("user");
        const role = interaction.options.getRole("role");
        const reason = interaction.options.get("reason")?.value || "*Nicht angegeben*";
        const embed = new EmbedBuilder({
          title: "Neues Teammitglied",
          fields: [
            { name: `User`, value: `${user}` },
            { name: "Wird uns unterst\xFCtzen als", value: `${role}` },
            { name: "Grund", value: `${reason}` }
          ],
          color: 53546
        });
        SendAndReply(embed, ping, "Die Meldung wurde erfolgreich gesendet");
        break;
      }
      case "uprank": {
        const user = interaction.options.getUser("user");
        const previous = interaction.options.getRole("previous");
        const next = interaction.options.getRole("next");
        const reason = interaction.options.get("reason")?.value || "*Nicht angegeben*";
        const embed = new EmbedBuilder({
          title: "Team Uprank",
          fields: [
            { name: "User", value: `${user}` },
            { name: "Vorheriger Rang", value: `${previous}` },
            { name: "Neuer Rang", value: `${next}` },
            { name: "Grund", value: `${reason}` }
          ],
          color: 53546
        });
        SendAndReply(embed, ping, "Die Meldung wurde erfolgreich gesendet");
        break;
      }
      case "downrank": {
        const user = interaction.options.getUser("user");
        const previous = interaction.options.getRole("previous");
        const next = interaction.options.getRole("next");
        const reason = interaction.options.get("reason")?.value || "*Nicht angegeben*";
        const embed = new EmbedBuilder({
          title: "Team Downrank",
          fields: [
            { name: "User", value: `${user}` },
            { name: "Vorheriger Rang", value: `${previous}` },
            { name: "Neuer Rang", value: `${next}` },
            { name: "Grund", value: `${reason}` }
          ],
          color: 13182998
        });
        SendAndReply(embed, ping, "Die Meldung wurde erfolgreich gesendet");
        break;
      }
      case "kick": {
        const user = interaction.options.getUser("user");
        const role = interaction.options.getRole("role");
        const reason = interaction.options.get("reason")?.value || "*Nicht angegeben*";
        const embed = new EmbedBuilder({
          title: "Team Kick",
          fields: [
            { name: "User", value: `${user}` },
            { name: "Ehemalig t\xE4tig als", value: `${role}` },
            { name: "Grund", value: `${reason}` }
          ],
          color: 13182998
        });
        SendAndReply(embed, ping, "Die Meldung wurde erfolgreich gesendet");
        break;
      }
      case "leave": {
        const user = interaction.options.getUser("user");
        const role = interaction.options.getRole("role");
        const reason = interaction.options.get("reason")?.value || "*Nicht angegeben*";
        const embed = new EmbedBuilder({
          title: "Team Leave",
          fields: [
            { name: "User", value: `${user}` },
            { name: "Ehemalig t\xE4tig als", value: `${role}` },
            { name: "Grund", value: `${reason}` }
          ],
          color: 13182998
        });
        SendAndReply(embed, ping, "Die Meldung wurde erfolgreich gesendet");
        break;
      }
    }
    function SendAndReply(embed, ping2, replyMessage) {
      channel.send({ content: ping2, embeds: [embed] });
      interaction.reply({ content: replyMessage, ephemeral: true });
    }
  }
};
var staff_changes_default = command;
export {
  staff_changes_default as default
};
