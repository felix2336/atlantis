import {
  casino_default,
  init_casino
} from "./chunk-W44NITJV.js";
import {
  __esm,
  __export,
  init_esm_shims
} from "./chunk-WWCIODDN.js";

// Commands/Casino/coinflip.ts
var coinflip_exports = {};
__export(coinflip_exports, {
  default: () => coinflip_default
});
import { EmbedBuilder, SlashCommandBuilder } from "discord.js";
var command, coinflip_default;
var init_coinflip = __esm({
  "Commands/Casino/coinflip.ts"() {
    init_esm_shims();
    init_casino();
    command = {
      data: new SlashCommandBuilder().setName("coinflip").setDescription("Wirf eine M\xFCnze und erhalte mit etwas Gl\xFCck ein wenig Geld").addStringOption((input) => input.setName("symbol").setDescription("W\xE4hle das Symbol, auf das du setzen m\xF6chtest").addChoices({ name: "Kopf", value: "heads" }, { name: "Zahl", value: "tails" }).setRequired(true)).addNumberOption((input) => input.setName("amount").setDescription("Wie viel Geld m\xF6chtest du setzen?").setRequired(true)),
      async execute(interaction) {
        let User = await casino_default.findOne({ user: interaction.user.id });
        if (!User) {
          User = await casino_default.create({
            user: interaction.user.id,
            bank: 0,
            wallet: 0,
            inventory: {}
          });
        }
        const symbol = interaction.options.getString("symbol");
        switch (symbol) {
          case "heads": {
            const bid = interaction.options.getNumber("amount");
            if (bid <= 0) return interaction.reply({ embeds: [new EmbedBuilder({ title: "M\xFCnzwurf fehlgeschlagen", description: "Du musst mindestens \u{1F4B0}1 bieten", color: 16716820 })] });
            if (bid > User.wallet) return interaction.reply({ embeds: [new EmbedBuilder({ title: "M\xFCnzwurf fehlgeschlagen", description: "Du kannst nicht mehr bieten, als du hast", color: 16716820 })] });
            const random = Math.floor(Math.random() * 2);
            if (random == 1) {
              const embed = new EmbedBuilder({
                title: "Guter Wurf",
                description: `Die M\xFCnze ist auf Kopf gelandet. Somit hast du \u{1F4B0}${bid} Plus gemacht`,
                color: 7864064
              });
              User.wallet += bid;
              await User.save();
              interaction.reply({ embeds: [embed] });
              return;
            } else {
              const embed = new EmbedBuilder({
                title: "Schlechter Wurf",
                description: `Die M\xFCnze ist auf Zahl gelandet. Somit hast du leider \u{1F4B0}${bid} verloren`,
                color: 16716820
              });
              User.wallet -= bid;
              await User.save();
              interaction.reply({ embeds: [embed] });
              return;
            }
            break;
          }
          case "tails": {
            const bid = parseInt(interaction.options.getNumber("amount"));
            if (bid <= 0) return interaction.reply({ embeds: [new EmbedBuilder({ title: "M\xFCnzwurf fehlgeschlagen", description: "Du musst mindestens \u{1F4B0}1 bieten", color: 16716820 })] });
            if (bid > User.wallet) return interaction.reply({ embeds: [new EmbedBuilder({ title: "M\xFCnzwurf fehlgeschlagen", description: "Du kannst nicht mehr bieten, als du hast", color: 16716820 })] });
            const random = Math.floor(Math.random() * 2);
            if (random == 1) {
              const embed = new EmbedBuilder({
                title: "Guter Wurf",
                description: `Die M\xFCnze ist auf Zahl gelandet. Somit hast du \u{1F4B0}${bid} Plus gemacht`,
                color: 7864064
              });
              User.wallet += bid;
              await User.save();
              interaction.reply({ embeds: [embed] });
              return;
            } else {
              const embed = new EmbedBuilder({
                title: "Schlechter Wurf",
                description: `Die M\xFCnze ist auf Kopf gelandet. Somit hast du leider \u{1F4B0}${bid} verloren`,
                color: 16716820
              });
              User.wallet -= bid;
              await User.save();
              interaction.reply({ embeds: [embed] });
              return;
            }
            break;
          }
        }
      }
    };
    coinflip_default = command;
  }
});

export {
  coinflip_default,
  coinflip_exports,
  init_coinflip
};
