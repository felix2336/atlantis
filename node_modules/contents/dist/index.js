// src/my-library.ts
import { Client, Collection, Colors, EmbedBuilder } from "discord.js";
import { createAudioPlayer } from "@discordjs/voice";
var Cooldown = class {
  storage;
  constructor() {
    this.storage = {};
  }
  delete(key) {
    const keyString = String(key);
    if (this.storage[keyString]) {
      delete this.storage[keyString];
      return true;
    }
    return false;
  }
  has(key) {
    const keyString = String(key);
    return this.storage[keyString] !== void 0;
  }
  isExpired(key) {
    const keyString = String(key);
    const n = Date.now();
    if (this.storage[keyString] < n || !this.storage[keyString]) {
      return true;
    }
    return false;
  }
  set(key, value) {
    const keyString = String(key);
    this.storage[keyString] = value;
  }
};
var MyClient = class extends Client {
  commands;
  apps;
  contextMenus;
  modals;
  selectMenus;
  buttons;
  guild;
  queue;
  player;
  constructor(options) {
    super(options);
    this.commands = new Collection();
    this.apps = [];
    this.contextMenus = new Collection();
    this.modals = new Collection();
    this.selectMenus = new Collection();
    this.buttons = new Collection();
    this.queue = [];
  }
  setGuild(guild) {
    this.guild = guild;
  }
  enableAudioPlayer() {
    this.player = createAudioPlayer();
    console.log("AudioPlayer aktiviert");
  }
};
var Suggestion = class {
  user;
  suggestion;
  type;
  constructor(data) {
    this.user = data.user;
    this.suggestion = data.suggestion;
    this.type = data.type;
  }
  async submit(channel) {
    const embed = new EmbedBuilder({
      title: "Neuer Vorschlag",
      description: `<@${this.user}> hat einen neuen ${this.getTypeString()} eingereicht:

**${this.suggestion}**`,
      color: Colors.DarkAqua
    });
    await channel.send({ embeds: [embed] });
  }
  getTypeString() {
    if (this.type == 1) return "Server Vorschlag";
    else if (this.type == 2) return "Bot Vorschlag";
  }
};

// src/types.ts
var SuggestionType = /* @__PURE__ */ ((SuggestionType2) => {
  SuggestionType2[SuggestionType2["Server"] = 1] = "Server";
  SuggestionType2[SuggestionType2["Bot"] = 2] = "Bot";
  return SuggestionType2;
})(SuggestionType || {});
export {
  Cooldown,
  MyClient,
  Suggestion,
  SuggestionType
};
