import {
  cooldowns_default,
  init_cooldowns
} from "./chunk-NJJFVLCF.js";
import {
  casino_default,
  init_casino
} from "./chunk-W44NITJV.js";
import {
  __esm,
  __export,
  init_esm_shims
} from "./chunk-WWCIODDN.js";

// Commands/Casino/rob.ts
var rob_exports = {};
__export(rob_exports, {
  default: () => rob_default
});
import { EmbedBuilder, SlashCommandBuilder } from "discord.js";
var command, rob_default;
var init_rob = __esm({
  "Commands/Casino/rob.ts"() {
    init_esm_shims();
    init_casino();
    init_cooldowns();
    command = {
      data: new SlashCommandBuilder().setName("rob").setDescription("Versuche einem user etwas Geld zu stehlen (MAX 40% des Guthabens)").addUserOption((input) => input.setName("target").setDescription("Der User den du ausrauben m\xF6chtest").setRequired(true)),
      async execute(interaction) {
        const target = interaction.options.getUser("target");
        if (target.bot) return interaction.reply({ content: "Du kannst keine Bots beklauen", ephemeral: true });
        let CD;
        CD = await cooldowns_default.findOne({ user: interaction.user.id });
        if (CD && CD.rob) {
          const lastExecute = parseInt(CD.rob);
          const now = Date.now();
          const cooldownTime = 108e5;
          const timestamp = Math.floor((lastExecute + cooldownTime) / 1e3);
          if (now - lastExecute < cooldownTime) {
            const embed = new EmbedBuilder({
              title: "Plan gescheitert",
              description: `Du musst dich erstmal versteckt halten, bevor du den n\xE4chsten Diebstahl planst.
<t:${timestamp}:R> kannst du wieder aus deiner Deckung kommen.`,
              color: 16716820
            });
            interaction.reply({ embeds: [embed] });
            return;
          }
        }
        if (!CD) {
          CD = await cooldowns_default.create({
            user: interaction.user.id,
            crime: String,
            work: String,
            rob: String,
            daily: String
          });
        }
        CD.rob = Date.now();
        await CD.save();
        if (target.id == interaction.user.id) {
          const embed = new EmbedBuilder({
            title: "Plan gescheitert",
            description: "Du kannst dich nicht selber bestehlen",
            color: 16716820
          });
          interaction.reply({ embeds: [embed] });
          return;
        }
        const Target = await casino_default.findOne({ user: target.id });
        if (!Target || Target.wallet <= 0) {
          const embed = new EmbedBuilder({
            title: "Plan gescheitert",
            description: `Du kannst <@${target.id}> kein Geld stehlen, weil er keins hat`,
            color: 16716820
          });
          interaction.reply({ embeds: [embed] });
          return;
        }
        const User2 = await casino_default.findOne({ user: interaction.user.id });
        if (!User2) return interaction.reply({ content: "Dein Konto wurde nicht gefunden!", ephemeral: true });
        const chance = Math.floor(Math.random() * 100);
        if (chance > 35) {
          const percentage = parseInt((Math.random() * 40 / 100).toFixed(2));
          const robbed = Math.floor(Target.wallet * percentage);
          const embed = new EmbedBuilder({
            title: "Erfolgreicher Diebstahl",
            description: `Du hast <@${target.id}> erfolgreich \u{1F4B0}${robbed} gestohlen`,
            color: 7864064
          });
          interaction.reply({ embeds: [embed] });
          Target.wallet -= robbed;
          User2.wallet += robbed;
          await Target.save();
          await User2.save();
        } else {
          const fined = Math.floor(Math.random() * 2e3);
          const embed = new EmbedBuilder({
            title: "Diebstahl fehlgeschlagen",
            description: `Du wurdest bei dem Versuch <@${target.id}> Geld zu stehlen erwischt und musstest \u{1F4B0}${fined} Strafe an ihn zahlen`,
            color: 16716820
          });
          interaction.reply({ embeds: [embed] });
          User2.wallet -= fined;
          Target.wallet += fined;
          await User2.save();
          await Target.save();
        }
      }
    };
    rob_default = command;
  }
});

export {
  rob_default,
  rob_exports,
  init_rob
};
